import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { mysqlPool } from "@/utils/db";
import type { ResultSetHeader, PoolConnection } from "mysql2/promise";

type OrderStatus =
  | "pending"
  | "confirmed"
  | "completed"
  | "delivered"
  | "cancelled";

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
const ALLOWED_STATUSES: OrderStatus[] = [
  "pending",
  "confirmed",
  "completed",
  "delivered",
  "cancelled",
];

export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } } // "id" ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ order_id (string "MD...")
) {
  const { id: orderId } = params; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  let connection: PoolConnection | undefined;

  try {
    const { status } = (await req.json()) as { status: OrderStatus };

    // Validation 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Status ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!status || !ALLOWED_STATUSES.includes(status)) {
      return NextResponse.json(
        { error: "Invalid status provided" },
        { status: 400 }
      );
    }

    // Validation 2: (‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parseInt)
    // 'orderId' ‡∏Ñ‡∏∑‡∏≠ string (‡πÄ‡∏ä‡πà‡∏ô "MD...") ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å URL
    if (!orderId) {
      return NextResponse.json({ error: "Invalid order ID" }, { status: 400 });
    }

    connection = await mysqlPool.getConnection();
    
    // --- üü® FIX ---
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô WHERE id = ? (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    // ‡πÄ‡∏õ‡πá‡∏ô WHERE order_id = ? (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
    const [result] = await connection.execute<ResultSetHeader>(
      "UPDATE orders SET order_status = ? WHERE order_id = ?",
      [status, orderId] // ‡πÉ‡∏ä‡πâ orderId (string)
    );

    if (result.affectedRows === 0) {
      // ‡πÑ‡∏°‡πà‡∏û‡∏ö Order ID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      return NextResponse.json(
        { error: "Order not found" },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      message: `Order ${orderId} updated to ${status}`, // ‡πÉ‡∏ä‡πâ orderId (string)
    });
  } catch (error) {
    console.error("Failed to update order status:", error);
    return NextResponse.json(
      { error: "Failed to update order status" },
      { status: 500 }
    );
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

